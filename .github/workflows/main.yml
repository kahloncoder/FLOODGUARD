# .github/workflows/main.yml

name: FloodGuard CI-CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

jobs:
  # -----------------------------------------------------------------
  # JOB 1: Backend CI (Code Quality & Tests for Python)
  # -----------------------------------------------------------------
  backend-ci:
    name: Backend CI (Lint & Test)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdal-dev gdal-bin libgeos-dev libproj-dev

      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -e .[dev]

      - name: Run Code Formatter Check (Black)
        run: black --check .

      - name: Run Linter (Ruff)
        run: ruff check .

      - name: Run Tests (Pytest)
        run: pytest
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # -----------------------------------------------------------------
  # JOB 2: Frontend Build (Creating the Static File Artifact)
  # -----------------------------------------------------------------
  frontend-build:
    name: Frontend Build (Create Artifact)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Run Frontend Linter
        run: npm run lint

      - name: Build Static Files
        run: npm run build

      - name: Upload Frontend Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-files
          path: frontend/dist # Vite's default output directory is 'dist'

  # -----------------------------------------------------------------
  # JOB 3: Build Final Docker Image
  # -----------------------------------------------------------------
  build-and-push-docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-build]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Frontend Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-files
          path: frontend/dist # Download to the correct location for the Dockerfile COPY command

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/kahloncoder/floodguard

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # -----------------------------------------------------------------
  # JOB 4: Deploy to Production VPS
  # -----------------------------------------------------------------
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to your application's directory
            cd ~/floodguard

            # Set environment variables for the docker-compose command
            # This securely passes secrets from GitHub to your server's runtime environment
            export DATABASE_URL='${{ secrets.DATABASE_URL }}'
            
            # Log in to GitHub Container Registry
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

            # Use docker-compose to pull the new image and restart the service
            # docker-compose will automatically use the environment variables we just exported
            docker-compose pull
            docker-compose up -d

            # Clean up old images to save space
            docker image prune -f